design(ddssva) <- ~ SV1 + SV2 + SV3 + Tissue
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
resLFC.sva <- lfcShrink(deAnalysis.sva, coef="Tissue_D_vs_RFZ", type="normal")
plotMA(resLFC.sva, ylim = c(-1, 1))
#### DESeq's plotPCA ####
rld.sva <- rlog(deAnalysis.sva, blind = FALSE)
DESeq2::plotPCA(rld.sva,
intgroup = "Retina",
ntop = 1000,
returnData = FALSE)
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2,
deAnalysis.sva$SV3)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Standard PCA
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
# PCA
pca.rld.sva <- prcomp(rld2.sva[, 3:ncol(rld2.sva)], center = F, scale. = F)
sink(paste0(out.name, "pcaSummary-sva-4svs.txt"))
sink()
sink(paste0(out.name, "pcaSummary-sva-3svs.txt"))
summary(pca.rld.sva)
sink()
scores.sva <- data.frame(rld2.sva, pca.rld.sva$x[,1:9])
# Get percent variance explained by each PC
head(pca.rld.sva$sdev)
pcVar <- round((((pca.rld.sva$sdev)^2) * 100) / sum(pca.rld.sva$sdev^2), digits = 2)
cumsum((pca.rld.sva$sdev)^2) / sum(pca.rld.sva$sdev^2)
# Plotting
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Retina)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Tissue),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Tissue)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Retina),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
# Plotting
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Retina)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Tissue),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
sampleDists <- dist(rld2[3:ncol(rld2)])
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-sv3.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
dev.off()
pdf(paste0(out.name, "deseq2-heatmap-sv3.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
# Plotting
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Retina)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Tissue),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
# Rerunning svaseq for final number of adjusted SVs
svseq <- svaseq(dat, mod, mod0, B = 8, n.sv = 2)
# Add SVA data to previous DESeq2 output
ddssva <- deAnalysis
ddssva$SV1 <- svseq$sv[,1]
ddssva$SV2 <- svseq$sv[,2]
design(ddssva) <- ~ SV1 + SV2 + Tissue
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
pca.rld.sva <- prcomp(rld2.sva[, 3:ncol(rld2.sva)], center = F, scale. = F)
sink(paste0(out.name, "pcaSummary-sva-2svs.txt"))
summary(pca.rld.sva)
sink()
scores.sva <- data.frame(rld2.sva, pca.rld.sva$x[,1:9])
# Get percent variance explained by each PC
head(pca.rld.sva$sdev)
pcVar <- round((((pca.rld.sva$sdev)^2) * 100) / sum(pca.rld.sva$sdev^2), digits = 2)
cumsum((pca.rld.sva$sdev)^2) / sum(pca.rld.sva$sdev^2)
# Plotting
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Retina)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Tissue),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-2svs.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
dev.off()
pdf(paste0(out.name, "deseq2-heatmap-2svs.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
# Rerunning svaseq for final number of adjusted SVs
svseq <- svaseq(dat, mod, mod0, B = 8, n.sv = 4)
# Add SVA data to previous DESeq2 output
ddssva <- deAnalysis
ddssva$SV1 <- svseq$sv[,1]
ddssva$SV2 <- svseq$sv[,2]
ddssva$SV3 <- svseq$sv[,3]
ddssva$SV4 <- svseq$sv[,4]
design(ddssva) <- ~ SV1 + SV2 + SV3 + SV4 + Tissue
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
#### Adjust data for SVA and format ####
rld.sva <- rlog(deAnalysis.sva, blind = FALSE)
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
pca.rld.sva <- prcomp(rld2.sva[, 3:ncol(rld2.sva)], center = F, scale. = F)
sink(paste0(out.name, "pcaSummary-sva-4svs",  Sys.Date(), "_.txt"))
summary(pca.rld.sva)
sink()
scores.sva <- data.frame(rld2.sva, pca.rld.sva$x[,1:9])
# Get percent variance explained by each PC
head(pca.rld.sva$sdev)
pcVar <- round((((pca.rld.sva$sdev)^2) * 100) / sum(pca.rld.sva$sdev^2), digits = 2)
cumsum((pca.rld.sva$sdev)^2) / sum(pca.rld.sva$sdev^2)
# Plotting
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Retina)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Tissue),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2,
deAnalysis.sva$SV3,
deAnalysis.sva$SV4)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
pca.rld.sva <- prcomp(rld2.sva[, 3:ncol(rld2.sva)], center = F, scale. = F)
sink(paste0(out.name, "pcaSummary-sva-4svs",  Sys.Date(), "_.txt"))
summary(pca.rld.sva)
sink()
plot(pca.rld.sva, type = "lines", main = "PCA of RNA-seq by prcomp")
title(xlab = "Principle Components")
head(pca.rld.sva$x)
scores.sva <- data.frame(rld2.sva, pca.rld.sva$x[,1:9])
# Get percent variance explained by each PC
head(pca.rld.sva$sdev)
pcVar <- round((((pca.rld.sva$sdev)^2) * 100) / sum(pca.rld.sva$sdev^2), digits = 2)
cumsum((pca.rld.sva$sdev)^2) / sum(pca.rld.sva$sdev^2)
# Plotting
ggplot(data = scores.sva, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(Retina)), size = 4) +
theme(legend.position="right") +
theme_light() +
ggtitle("(PCA determined by prcomp, \nPC1 scaled by 0.2 for easier viewing)") +
coord_fixed(ratio = 0.2, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
geom_text(aes(label=Tissue),hjust="inward", vjust="inward", size = 3) +
xlab(paste0("PC1: ",pcVar[1],"% variance")) +
ylab(paste0("PC2: ",pcVar[2],"% variance"))
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
dev.off()
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-2svs", Sys.Date(), "_.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf")
# Output
out.name <- paste0("output/R_")
paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf")
pdf(paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
dev.off()
pdf(paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf"), width=8)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
pdf(paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf"), width=6)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
pdf(paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf"), width=6, height=6)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
pdf(paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf"))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
# Rerunning svaseq for final number of adjusted SVs
svseq <- svaseq(dat, mod, mod0, B = 8, n.sv = 3)
for (i in 1:4) {
stripchart(svseq$sv[, i] ~ deAnalysis$Retina, vertical = TRUE, main = paste0("SV", i))
abline(h = 0)
}
dev.off()
# Add SVA data to previous DESeq2 output
ddssva <- deAnalysis
ddssva$SV1 <- svseq$sv[,1]
ddssva$SV2 <- svseq$sv[,2]
ddssva$SV3 <- svseq$sv[,3]
design(ddssva) <- ~ SV1 + SV2 + SV3 + Tissue
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
rld.sva <- rlog(deAnalysis.sva, blind = FALSE)
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2,
deAnalysis.sva$SV3)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# For distances plus map
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-3svs_", Sys.Date(), "_.pdf"))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
# Rerunning svaseq for final number of adjusted SVs
svseq <- svaseq(dat, mod, mod0, B = 8, n.sv = 4)
# Add SVA data to previous DESeq2 output
ddssva <- deAnalysis
ddssva$SV1 <- svseq$sv[,1]
ddssva$SV2 <- svseq$sv[,2]
ddssva$SV3 <- svseq$sv[,3]
ddssva$SV4 <- svseq$sv[,4]
design(ddssva) <- ~ SV1 + SV2 + SV3 + SV4 + Tissue
#### Rerun DESeq2 with SVA data ####
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# # 2 genes didn't converge. Per https://support.bioconductor.org/p/65091/ , I tested increasing the iterations, but 1 gene still didn't converge. For simplicity's sake, will keep DESeq and clean out the remaining 2 non-convergent genes
#
# # Genes to be removed
# deAnalysis.sva.orig[!mcols(deAnalysis.sva.orig)$betaConv]
#
#     # rownames(2): ENSGALG00000043263 ENSGALG00000043688
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
rld.sva <- rlog(deAnalysis.sva, blind = FALSE)
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2,
deAnalysis.sva$SV3,
deAnalysis.sva$SV4)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-4svs_", Sys.Date(), "_.pdf"))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
# Rerunning svaseq for final number of adjusted SVs
svseq <- svaseq(dat, mod, mod0, B = 8, n.sv = 1)
# Add SVA data to previous DESeq2 output
ddssva <- deAnalysis
ddssva$SV1 <- svseq$sv[,1]
design(ddssva) <- ~ SV1 + Tissue
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
rld.sva <- rlog(deAnalysis.sva, blind = FALSE)
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-1sv_", Sys.Date(), "_.pdf"))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
# Rerunning svaseq for final number of adjusted SVs
svseq <- svaseq(dat, mod, mod0, B = 8, n.sv = 2)
ddssva <- deAnalysis
ddssva$SV1 <- svseq$sv[,1]
ddssva$SV2 <- svseq$sv[,2]
design(ddssva) <- ~ SV1 + SV2 + Tissue
# Applying SVA to remove hidden batch effects
deAnalysis.sva <- DESeq(ddssva)
# Check results for SVs
resultsNames(deAnalysis.sva) # Looks good
#### Adjust data for SVA and format ####
rld.sva <- rlog(deAnalysis.sva, blind = FALSE)
# Make SV covariate matrix (necessary when accounting for multiple SVs)
sva.cov <- cbind(deAnalysis.sva$SV1,
deAnalysis.sva$SV2)
# Adjust for SV effects on counts with {limma}
rld.cts.sva <- limma::removeBatchEffect(assay(rld.sva),
covariates = sva.cov)
# Transpose and annotate
rld.cts.sva <- t(rld.cts.sva)
rld.ann.sva <- rownames(rld.cts.sva)
rld.ann2.sva <- stringr::str_split(rld.ann.sva, "_")
## Convert annotations (list of lists) into preferred format
rld.ann2.sva <- matrix(unlist(rld.ann2.sva), nrow=length(unlist(rld.ann2.sva[1])))
head(rld.ann2.sva)
rld.ann3.sva <- as.data.frame(t(rld.ann2.sva))
head(rld.ann3.sva)
## Name annotation columns
colnames(rld.ann3.sva)[1] <- "Tissue"
colnames(rld.ann3.sva)[2] <- "Retina"
## Add to count data
rld2.sva <- cbind(rld.ann3.sva, rld.cts.sva)
head(rld2.sva[,1:6])
sampleDists <- dist(rld2.sva[3:ncol(rld2.sva)])
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld2.sva$Retina, rld2.sva$Tissue, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pdf(paste0(out.name, "deseq2-heatmap-2svs_", Sys.Date(), "_.pdf"))
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dev.off()
